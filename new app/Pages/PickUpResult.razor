@page "/pickUpResult/{Budget}/{SelectStr}"
@using Algorithm
@inject User user
@inject AssistService service
@* @inject ComponentsContext db *@
@inject NavigationManager navigationManager

<style>
    .title {
    margin: 70px 0 0 70px;
    font-size: 48px;
    font-weight: bold;
    color: #5B0CF9;
}

.button {
    margin: auto;
    font-size: 24px;
    padding: 15px 25px;
    color: #4C0099;
    border: #4C0099 solid 1px;
    border-radius: 0;
}

.button_save {
    color: #ffffff;
    border: #ffffff solid 1px;
    background-color: #4C0099;
}
</style>

<div class="container-fluid">
    <div class="title">Ваша подборка</div>
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <ComponentsList Selection=_selection />
        </div>
        <div class="d-flex justify-content-between mb-5">
            <button class="btn button" @onclick="Redirect">Вернуться на главную</button>
            <button class="btn button button_save" @onclick="Handle">Сохранить подборку</button>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public string Budget { get; set; }
    [Parameter]
    public string SelectStr { get; set; }

    private int _budget;
    private Selection _selection;

    protected override void OnInitialized()
    {
        _budget = GetBudget(Budget);
        _selection = GetSelection(GetComponentSelect(SelectStr));
    }

    private int GetCost(List<Component> components)
    {
        int cost = 0;
        foreach (Component component in components)
            cost += component.Cost;
        return cost;
    }

    private int GetWorth(List<Component> components)
    {
        int worth = 0;
        foreach (Component component in components)
            worth += component.Worth;
        return worth;
    }

    private Selection GetSelection(List<bool> select)
    {
        Algorithm algorithm = new Algorithm();
        algorithm.Capacity = GetBudget(Budget);
        algorithm.MaxItemCost = 3000;
        algorithm.Data = GetInitialData();
        algorithm.Markers = GetComponentSelect(SelectStr).ToArray();

        List<int> idSet = algorithm.Start();
        List<Component> components = GetComponents(idSet);

        Selection selection = new Selection();
        selection.List = components;
        selection.Cost = GetCost(components);
        selection.Worth = GetWorth(components);

        return selection;
    }

    private List<Component> GetComponents(List<int> idSet)
    {
        List<Component> components = new List<Component>();

        @* if(idSet[0] != -1)
            components.Add(db.CPU.Where(c => c.Id == idSet[0]).FirstOrDefault());

        if(idSet[1] != -1)
            components.Add(db.RAM.Where(c => c.Id == idSet[1]).FirstOrDefault());

        if(idSet[2] != -1)
            components.Add(db.StorageDevice.Where(c => c.Id == idSet[2]).FirstOrDefault());

        if(idSet[3] != -1)
            components.Add(db.PowerSupply.Where(c => c.Id == idSet[3]).FirstOrDefault());

        if(idSet[4] != -1)
            components.Add(db.Motherboard.Where(c => c.Id == idSet[4]).FirstOrDefault());

        if(idSet[5] != -1)
            components.Add(db.Shell.Where(c => c.Id == idSet[5]).FirstOrDefault());

        if(idSet[6] != -1)
            components.Add(db.CoolingSystem.Where(c => c.Id == idSet[6]).FirstOrDefault()); *@

        return components;
    }

    private InitialData GetInitialData()
    {
        InitialData data = new InitialData();
@* 
        data.Category.Add(GetItems(db.CPU));
        data.Category.Add(GetItems(db.RAM));
        data.Category.Add(GetItems(db.StorageDevice));
        data.Category.Add(GetItems(db.PowerSupply));
        data.Category.Add(GetItems(db.Motherboard));
        data.Category.Add(GetItems(db.Shell));
        data.Category.Add(GetItems(db.CoolingSystem)); *@

        return data;
    }

    private List<Item> GetItems(IEnumerable<Component> set)
    {
        List<Item> items = new List<Item>();
        foreach (Component component in set)
        {
            Item item = new Item()
            {
                Id = component.Id,
                Cost = component.Cost,
                Worth = component.Worth
            };
            items.Add(item);
        }

        return items;
    }

    private int GetBudget(string budgetStr)
    {
        int budget = 0;
        try
        {
            budget = Convert.ToInt32(budgetStr);
        }
        catch { }

        return budget;
    }

    private List<bool> GetComponentSelect(string select)
    {
        List<bool> result = new List<bool>();
        foreach (char c in select)
        {
            if (c == '1')
                result.Add(true);
            else if (c == '0')
                result.Add(false);
        }
        return result;
    }

    private async Task Handle()
    {
        _selection.Name = $"Подборка {user.SavedCompanents.Count + 1}";
        user.SavedCompanents.Add(_selection);
        await user.SetSavedComponents(user.SavedCompanents);
        Redirect();
    }

    private void Redirect()
    {
        navigationManager.NavigateTo("/");
    }
}